		MOV		R0,	#velocidad							; puntero a unsigned int
		MOV		R1,	#skip									; puntero a bool
		MOV		SP,	#pilaptr								; puntero a pila
		BL		sirena
		END
		
sirena
		STMFD	SP!,{R4,R5,R6,R7,R8,LR}				; push a la pila
		MOV		R4,#0xF0									;inicio
		MOV		R5,R0
		MOV		R6,R1
		MOV		R7,#8										; contador
		MOV		R8,#2										; contador2
		
		
for1
		MOV		R0,R4										; R0 = R4
		BL		mostrar
		LDR		R0,[R5,#0]									; R0 = v[0]
		BL		cout
		MOV		R0,R5										; R0 = v
		MOV		R1,R6										; R0 = skip
		BL		retardo
		LDRB		R0,[R6,#0]
		CMP		R6,#1									; if (skip == true) return;
		BEQ		return
		SUBS		R7,R7,#1
		BNE		for1
		
		MOV		R7,#8										; se vuelve a poner el contador en 8
		LSR		R4	,R4,#4									; desplazamiento a la derecha 4 posiciones
		
for2
		MOV		R0,R4										; R0 = R4
		BL		mostrar
		LDR		R0,[R5,#0]									; R0 = v[0]
		BL		cout
		MOV		R0,R5										; R0 = v
		MOV		R1,R6										; R0 = skip
		BL		retardo
		LDRB		R0,[R6,#0]
		CMP		R6,#1										; if (skip == true) return;
		BEQ		return
		SUBS		R7,R7,#1
		BNE		for2
		
		MOV		R7,#2										; se restaura el contador a 2
		LSL		R4,R4,#4									; desplazaiento a la izquierda 4 posiciones
		
for3
		
for4
		MOV		R0,R4										; R0 = R4
		BL		mostrar
		LDR		R0,[R5,#0]									; R0 = v[0]
		BL		cout
		MOV		R0,R5										; R0 = v
		MOV		R1,R6										; R0 = skip
		BL		retardo
		LDRB		R0,[R6,#0]
		CMP		R6,#1										; if (skip == true) return;
		BEQ		return
		SUBS		R8,R8,#1
		BNE		for4
		
		MOV		R8,#2
		
for5
		MOV		R0,R4										; R0 = R4
		BL		mostrar
		LDR		R0,[R5,#0]									; R0 = v[0]
		BL		cout
		MOV		R0,R5										; R0 = v
		MOV		R1,R6										; R0 = skip
		BL		retardo
		LDRB		R0,[R6,#0]
		CMP		R6,#1										; if (skip == true) return;
		BEQ		return
		SUBS		R8,R8,#1
		BNE		for5
		SUBS		R7,R7,#1
		BNE		for3
		
		LSR		R4,R4,#4							; corrimiento a la derecha de 4 posiciones
		MOV		R7,#2
		MOV		R8,#2
		
for6
		
for7
		MOV		R0,R4										; R0 = R4
		BL		mostrar
		LDR		R0,[R5,#0]									; R0 = v[0]
		BL		cout
		MOV		R0,R5										; R0 = v
		MOV		R1,R6										; R0 = skip
		BL		retardo
		LDRB		R0,[R6,#0]
		CMP		R6,#1										; if (skip == true) return;
		BEQ		return
		SUBS		R8,R8,#1
		BNE		for7
		
		MOV		R8,#2
		
for8
		MOV		R0,R4										; R0 = R4
		BL		mostrar
		LDR		R0,[R5,#0]									; R0 = v[0]
		BL		cout
		MOV		R0,R5										; R0 = v
		MOV		R1,R6										; R0 = skip
		BL		retardo
		LDRB		R0,[R6,#0]
		CMP		R6,#1										; if (skip == true) return;
		BEQ		return
		SUBS		R8,R8,#1
		BNE		for8
		SUBS		R7,R7,#1
		BNE		for6
		B		return
		
mostrar
		MOV		PC,LR
		
cout
		MOV		PC,LR
		
retardo
		MOV		PC,LR
		
return
		LDMFD	SP!,{R4,R5,R6,R7,R8,LR}				; pop a la pila
		MOV		PC,LR
		
		
		
velocidad	DCD		4
skip		DCD		4
		
pila		FILL		40
pilaptr	DCD		1
